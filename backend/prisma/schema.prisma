generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // url do banco de dados precisa ficar no .env 
}

model User {
  id                 String      @id @default(uuid())
  email              String      @unique
  password           String
  name               String
  bio                String?
  avatar             String? //avatar ira armazenar a URL da imagem de perfil 
  role               String
  ide_theme          Boolean     @default(true)
  project            Project[]
  Tutorial           Tutorial[]
  studentClassrom    Classroom?  @relation(fields: [classroomId], references: [id])
  classroomId        String?
  professorClassroom Classroom[] @relation("professor")
}

//tabela dos tutoriais 
model Tutorial {
  id          String   @id @default(uuid())
  title       String   @unique
  description String?
  content     String
  level       Int
  author      User     @relation(fields: [userId], references: [id]) // relacionamento com o user para saber quem é o autor daquele Tutorial   
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//tabela da documentação 
model Document {
  id      String @id @default(uuid())
  title   String @unique
  content String
}

//tabela dos projetos 
model Project {
  id          String   @id @default(uuid())
  title       String
  description String?
  favorite    Boolean  @default(false)
  content     String?
  author      User     @relation(fields: [userId], references: [id]) // relacionamento com o user para saber quem é o autor daquele projeto  
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Classroom {
  id               String     @id @default(uuid())
  students         User[]
  tasklists        Tasklist[]
  className        String
  classDescription String
  professor        User       @relation("professor", fields: [professorId], references: [id])
  professorId      String
  cod              String     @unique @default(uuid())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Tasklist {
  id          String     @id @default(uuid())
  name        String     @unique
  tasks       Task[]
  Classroom   Classroom? @relation(fields: [classroomId], references: [id])
  classroomId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Task {
  id          String       @id @default(uuid())
  title       String       @unique
  description String
  submissions Submission[]
  Tasklist    Tasklist?    @relation(fields: [tasklistId], references: [id])
  tasklistId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Submission {
  id        String  @id @default(uuid())
  answer    String
  isCorrect Boolean
  userId    Int
  Task      Task?   @relation(fields: [taskId], references: [id])
  taskId    String?
}
